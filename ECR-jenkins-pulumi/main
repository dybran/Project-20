from pulumi import export, ResourceOptions
import pulumi_aws as aws
import json
import pulumi
from pulumi import Config, Output




# create ECR repository
repository = aws.ecr.Repository("tooling-ecr-repo")

# Assign an existing keypair
keypair_name = 'dybran-ec2'


vpc = aws.ec2.Vpc(
    "tooling-vpc",
    cidr_block="10.0.0.0/16",
    enable_dns_support=True,
    enable_dns_hostnames=True,
    tags={"Name": "tooling-vpc"},
)

# Create subnet in an different Availability Zones
subnet = aws.ec2.Subnet('tooling-subnet',
    vpc_id=vpc.id,
    availability_zone='us-east-1a',  
    cidr_block='10.0.1.0/24',       
	tags={"Name": "tooling-subnet"},
)


# Create an Internet Gateway and attach it to the VPC
internet_gateway = aws.ec2.InternetGateway("tooling-igw",
    vpc_id=vpc.id,
	tags={"Name": "tooling-IGw"},
)



# Associate the Internet Gateway with the Public Subnet
public_route_table = aws.ec2.RouteTable("tooling-route-table",
    vpc_id=vpc.id,
    routes=[
        aws.ec2.RouteTableRouteArgs(
            cidr_block="0.0.0.0/0",
            gateway_id=internet_gateway.id
        )
    ]
)

aws.ec2.RouteTableAssociation("tooling-association",
    route_table_id=public_route_table.id,
    subnet_id=subnet.id
)


# Create a SecurityGroup that permits HTTP and SSH ingress and unrestricted egress.
ec2_group = aws.ec2.SecurityGroup('jenkins-secgrp', 
	description='Enable HTTP access',
	ingress=[
		aws.ec2.SecurityGroupIngressArgs(
			protocol='tcp',
			from_port=22,
			to_port=22,
			cidr_blocks=['0.0.0.0/0'],
			description="SSH access",
	    ),
	    aws.ec2.SecurityGroupIngressArgs(
			protocol='tcp',
			from_port=8080,
			to_port=8080,
			cidr_blocks=['0.0.0.0/0'],
			description="Http access",
	    ),
	],
  	egress=[aws.ec2.SecurityGroupEgressArgs(
		protocol='-1',
		from_port=0,
		to_port=0,
		cidr_blocks=['0.0.0.0/0'],
	)],
	tags={"Name": "jenkins-secgrp"},
)


# Load script from file
with open('jenkins-docker-setup.sh', 'r') as file:
    user_data = file.read()


# Get recent Ubuntu Server 20.04 LTS image
ami = aws.ec2.get_ami(
    most_recent="true",
    owners=["099720109477"],
    filters=[
        aws.ec2.GetAmiFilterArgs(
            name="name",
            values=["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"],
        ),
        aws.ec2.GetAmiFilterArgs(
            name="virtualization-type",
            values=["hvm"],
        ),
    ],
)


# Create an IAM role for the jenkins server.
role = aws.iam.Role('jenkins-role',
	assume_role_policy=json.dumps({
		'Version': '2008-10-17',
		'Statement': [{
			'Sid': '',
			'Effect': 'Allow',
			'Principal': {
				'Service': 'ec2.amazonaws.com'
			},
			'Action': 'sts:AssumeRole',
		}]
	}),
)

rpa = aws.iam.RolePolicyAttachment('jenkins-policy',
	role=role.name,
	policy_arn='arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess',
)

# Create the Instance Profile
instance_profile = aws.iam.InstanceProfile("jenkinsInstanceProfile", role=role.name)


# create EC2 instance for Jenkins server
server = aws.ec2.Instance('jenkins-server', 
    instance_type='t2.micro',
    security_groups=[ec2_group.name],
    ami=ami.id,
	key_name=keypair_name,
	iam_instance_profile=instance_profile.name,
    user_data=user_data,
	tags={"Name": "jenkins-server"},
)




# Exports outputs
pulumi.export('public_ip', server.public_ip)
pulumi.export('ami_id', ami.id)
pulumi.export('repositoryUrl', repository.repository_url)